## literate implementation of the Klipper firmware for UC3D E386SX.
## Make sure you compile the firmware with the following options:
## [*] Enable extra low-level configuration options
##     Micro-controller Architecture (LPC176x (Smoothieboard))
##     Processor model (lpc1769)
## [*] Target board uses Smoothieware bootloader
##     Communication interface (Serial (on UART0 P0.3/P0.2))
## (250000) Baud rate for serial port
##
## Make sure that in raspi-config, the Serial port is enabled without a prompt.
## Meta: Ditalini - UC3D E386SX


## Because the mainboard (MKS SGenL V2) and the Raspberry Pi are connected using
## the AUX and GPIO, respectively, we have to use the hard-coded serial port.
[mcu]
serial: /dev/ttyS0
baud: 250000

## This is a cartesian printer, its speeds are higher than a typical Ender3 clone.
[printer]
kinematics: cartesian
max_velocity: 300
max_z_velocity: 50
max_accel: 3000
max_z_accel: 500

## Establish the XY kinematics and its corresponding electronics.

## - X-axis kinematics
[stepper_x]
enable_pin: !P2.1
step_pin: P2.2
dir_pin: P2.3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!P1.29
position_endstop: 0
position_max: 235
homing_speed: 120

[tmc2209 stepper_x]
uart_pin: P1.1
run_current: 0.600
hold_current: 0.600
sense_resistor: 0.110
stealthchop_threshold: 999999

## - Extruder kinematics and electronics
##   * extruder
[extruder]
enable_pin: !P2.12
step_pin: P2.13
dir_pin: P0.11
max_extrude_only_distance: 100.0
microsteps: 16
rotation_distance: 24.615384615384615
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.23
control: pid
pid_Kp: 20.88
pid_Ki: 1.98
pid_Kd: 55.12
min_temp: 0
max_temp: 300

[tmc2209 extruder]
uart_pin: P1.15
run_current: 0.600
hold_current: 0.600
sense_resistor: 0.110
stealthchop_threshold: 999999

##   * part cooling fan
[fan]
pin: P2.4

##   * filament runout sensor
[filament_switch_sensor runout]
switch_pin: P1.24
pause_on_runout: True

## - Y-axis kinematics
[stepper_y]
enable_pin: !P2.8
step_pin: P0.19
dir_pin: !P0.20
microsteps: 16
rotation_distance: 40
endstop_pin: ^!P1.27
position_endstop: 0
position_max: 235
homing_speed: 120

[tmc2209 stepper_y]
uart_pin: P1.8
run_current: 0.600
hold_current: 0.600
sense_resistor: 0.110
stealthchop_threshold: 999999

## - Y-axis electronics

[heater_bed]
heater_pin: P2.5
sensor_type: Generic 3950
sensor_pin: P0.24
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 131.23
pid_Ki: 26.20
pid_Kd: 438.16
min_temp: 0
max_temp: 120

## This printer is a dual leadscrew setup for the Z-axis, and each is driven by
## its own stepper driver. It has a probe that is used both for bed leveling
## and z-stepper auto-alignment.

## This is an EZABL probe using the stock mount position of CR-10's compatible
## mounts.
[probe]
pin: !P1.25
x_offset: -44
y_offset: -10
z_offset: 1.88

## Two stepper motors, both sharing the same probe.
[stepper_z]
enable_pin: !P0.21
step_pin: P0.22
dir_pin: P2.11
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -2
position_max: 250
homing_speed: 40

[tmc2209 stepper_z]
uart_pin: P1.10
run_current: 0.700
hold_current: 0.700
sense_resistor: 0.110
stealthchop_threshold: 999999

[stepper_z1]
enable_pin: !P0.10
step_pin: P1.9
dir_pin: P1.14
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop

[tmc2209 stepper_z1]
uart_pin: P1.17
run_current: 0.700
hold_current: 0.700
sense_resistor: 0.110
stealthchop_threshold: 999999

## We use safe Z-home at the center of the bed, calculated and hard-coded to be
## executed at the center of the bed.
[safe_z_home]
home_xy_position: 161.5, 127.5 # BED_SIZE/2+OFFSET
speed: 120
z_hop: 0.5
z_hop_speed: 120

## The bed leveling is a 5x5 grid process.
[bed_mesh]
speed: 120
horizontal_move_z: 2.7
mesh_min: 35, 40
mesh_max: 191, 220
probe_count: 5

## Unfortunately, Klipper does not internally implement G29, you have to supply it yourself:
[gcode_macro G29]
gcode:
## - Align the z-steppers
    Z_TILT_ADJUST
## - Run bed leveling
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=default

## We got two independent stepper drivers for the z-axis, it mean, it is possible
## to use them individually to level the gantry.
[z_tilt]
z_positions:
    235,135
    0,135
points:
    235,135
    90,135
speed: 200
horizontal_move_z: 2.5
retry_tolerance: 0.01
retries: 10


## Klipper's LCD support is not spectacular, but we should support it anyway. Moreover, 
## we can customize the menu later (check appendix B).
[display]
lcd_type: st7920
cs_pin: EXP1_4
sclk_pin: EXP1_5
sid_pin: EXP1_3
encoder_pins: ^!EXP2_5, ^!EXP2_3 # tricky, to invert the encoder, you don't invert the pins, you _swap_ them (5>3)
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8 # NO KILL PIN

[output_pin beeper]
pin: EXP1_1


### Appendix A: pins alias

# EXP1 / EXP2 (display) pins
[board_pins]
aliases:
    EXP1_1=P1.31, EXP1_3=P0.18, EXP1_5=P0.15, EXP1_7=P1.0,  EXP1_9=<GND>,
    EXP1_2=P1.30, EXP1_4=P0.16, EXP1_6=P0.17, EXP1_8=P1.22, EXP1_10=<5V>,
    EXP2_1=P0.8,  EXP2_3=P3.25, EXP2_5=P3.26, EXP2_7=P0.27, EXP2_9=<GND>,
    EXP2_2=P0.7,  EXP2_4=P0.28, EXP2_6=P0.9,  EXP2_8=<RST>, EXP2_10=<NC>

